df <- airquality
# Identify data type, Change it to tibble data type and make change to the df
class(df)  # Check the data type (data.frame)
# Change to tibble data type
df <- as_tibble(df)
# Confirm the data type is tibble by printing df out
class(df)  # Should show "tbl_df" "tbl" "data.frame"
library(tibble)
library(skimr)
library(dplyr)
library(ggplot2)
library(forcats)
library(tibble)
library(skimr)
library(dplyr)
library(ggplot2)
library(forcats)
df <- airquality
df <- as_tibble(df)
df <- as_tibble(df)
#Problem 1: Importing and exploring data
#P1.1. Rename Data set
```{r}
# Load the airquality dataset and assign it to 'df'
df <- airquality
# Check the current data type of df
class(df)  # Check the class of df
# Convert df to a tibble
library(tibble)
df <- as_tibble(df)
# Print df to confirm it is a tibble
print(df)
# Histogram of Ozone
hist(df$Ozone, main = "Histogram of Ozone", xlab = "Ozone")
# Histogram of Ozone on log scale
hist(log(df$Ozone, base = exp(1)), main = "Histogram of log(Ozone)", xlab = "log(Ozone)")
# Ozone vs. Solar.R
plot(df$Solar.R, df$Ozone, main = "Ozone vs. Solar.R", xlab = "Solar.R", ylab = "Ozone")
abline(lm(Ozone ~ Solar.R, data = df), col = "red")  # Add regression line
# Ozone vs. Wind
plot(df$Wind, df$Ozone, main = "Ozone vs. Wind", xlab = "Wind", ylab = "Ozone")
abline(lm(Ozone ~ Wind, data = df), col = "red")
# Ozone vs. Temp
plot(df$Temp, df$Ozone, main = "Ozone vs. Temp", xlab = "Temp", ylab = "Ozone")
abline(lm(Ozone ~ Temp, data = df), col = "red")
# Boxplot of Ozone by Month
boxplot(Ozone ~ Month, data = df, main = "Ozone by Month", xlab = "Month", ylab = "Ozone")
# Bar chart of mean Ozone by Month
ozone_mean <- tapply(df$Ozone, df$Month, mean, na.rm = TRUE)
barplot(ozone_mean, names.arg = levels(df$Month), main = "Mean Ozone by Month", xlab = "Month", ylab = "Mean Ozone")
# How many cases exist for each month
df %>%
group_by(Month) %>%
summarise(count = n())
# Charts showing the impact of Solar.R on Ozone cut by Month
ggplot(df, aes(x = Solar.R, y = Ozone)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ Month, ncol = 3) +
labs(title = "Impact of Solar.R on Ozone by Month")
# Charts showing the impact of Wind on Ozone cut by Month
ggplot(df, aes(x = Wind, y = Ozone)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ Month, ncol = 3) +
labs(title = "Impact of Wind on Ozone by Month")
# Charts showing the impact of Temp on Ozone cut by Month
ggplot(df, aes(x = Temp, y = Ozone)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ Month, ncol = 3) +
labs(title = "Impact of Temp on Ozone by Month")
cor(df[, sapply(df, is.numeric)])
# (1) Where the missing values are located
which(is.na(df$Ozone))
which(is.na(df$Solar.R))
# (2) Number of missing values in the dataset (df)
sum(is.na(df))
# (3) Number of missing values in the Solar.R column
sum(is.na(df$Solar.R))
# (4) All the rows that include at least one missing value
df[rowSums(is.na(df)) > 0, ]
# (5) Number of rows that include at least one missing value
nrow(df[rowSums(is.na(df)) > 0, ])
# (1) Replace missing values in Solar.R with median
df$Solar.R[is.na(df$Solar.R)] <- median(df$Solar.R, na.rm = TRUE)
# (2) Replace missing values in Ozone with median
df$Ozone[is.na(df$Ozone)] <- median(df$Ozone, na.rm = TRUE)
# (3) Take a look at the descriptive statistics again
summary(df)
# (4) Get mean and standard deviation of all continuous variables
sapply(df[, sapply(df, is.numeric)], mean, na.rm = TRUE)
sapply(df[, sapply(df, is.numeric)], sd, na.rm = TRUE)
# Correlations among all numeric variables
cor(df[, sapply(df, is.numeric)])
# Create a new variable log(Ozone)
df$log_Ozone <- log(df$Ozone)
# Correlations with log(Ozone)
cor(df[, c("log_Ozone", sapply(df[, -which(names(df) == "Ozone")], is.numeric))])
# Create a new variable log(Ozone)
df$log_Ozone <- log(df$Ozone)
# Get the names of numeric columns (excluding "Ozone")
numeric_cols <- names(df)[sapply(df, is.numeric) & names(df) != "Ozone"]
# Compute correlations with log_Ozone
cor(df[, c("log_Ozone", numeric_cols)])
# (1) Add the log(Ozone) variable
df <- df %>%
mutate(log_Ozone = log(Ozone))
# (2) Change Month to factor
df$Month <- factor(df$Month)
# (3) Change data type to tibble permanently
df <- as_tibble(df)
# (4) Confirm the changes
glimpse(df)
# (1) Histogram of Ozone, Ozone_logged, and Solar.R
par(mfrow = c(1, 3))
hist(df$Ozone, main = "Ozone", xlab = "Ozone")
hist(df$log_Ozone, main = "log(Ozone)", xlab = "log(Ozone)")
hist(df$Solar.R, main = "Solar.R", xlab = "Solar.R")
# (2) Ozone by Continuous variables
plot(df$Solar.R, df$Ozone, main = "Ozone vs. Solar.R", xlab = "Solar.R", ylab = "Ozone")
abline(lm(Ozone ~ Solar.R, data = df), col = "red")
plot(df$Wind, df$Ozone, main = "Ozone vs. Wind", xlab = "Wind", ylab = "Ozone")
abline(lm(Ozone ~ Wind, data = df), col = "red")
plot(df$Temp, df$Ozone, main = "Ozone vs. Temp", xlab = "Temp", ylab = "Ozone")
abline(lm(Ozone ~ Temp, data = df), col = "red")
# (3) Ozone by Month
boxplot(Ozone ~ Month, data = df, main = "Ozone by Month", xlab = "Month", ylab = "Ozone")
# (4) Moderating Role of Month in the impact of Continuous variables on Ozone
ggplot(df, aes(x = Solar.R, y = Ozone)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ Month, ncol = 3) +
labs(title = "Impact of Solar.R on Ozone by Month")
ggplot(df, aes(x = Wind, y = Ozone)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ Month, ncol = 3) +
labs(title = "Impact of Wind on Ozone by Month")
ggplot(df, aes(x = Temp, y = Ozone)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ Month, ncol = 3) +
labs(title = "Impact of Temp on Ozone by Month")
# Create Ozone_cat variable
df <- df %>%
mutate(Ozone_cat = case_when(
Ozone <= quantile(Ozone, 0.25) ~ "Low",
Ozone > quantile(Ozone, 0.25) & Ozone <= quantile(Ozone, 0.75) ~ "Middle",
Ozone > quantile(Ozone, 0.75) ~ "High"
))
# Reorder Ozone_cat levels
df <- df %>%
mutate(Ozone_cat = fct_relevel(Ozone_cat, "Low", "Middle", "High"))
# Monthly counts of Ozone_cat
ggplot(df, aes(x = Month, fill = Ozone_cat)) +
geom_bar(position = "dodge") +
labs(title = "Monthly Ozone Severity",
x = "Month",
y = "Count",
fill = "Ozone Level") +
scale_fill_discrete(labels = c("Low", "Middle", "High")) +
theme_minimal()
# How many cases exist for each month
df %>%
group_by(Month) %>%
summarise(count = n())
# Charts showing the impact of Solar.R on Ozone cut by Month
ggplot(df, aes(x = Solar.R, y = Ozone)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ Month, ncol = 3) +
labs(title = "Impact of Solar.R on Ozone by Month")
# Charts showing the impact of Wind on Ozone cut by Month
ggplot(df, aes(x = Wind, y = Ozone)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ Month, ncol = 3) +
labs(title = "Impact of Wind on Ozone by Month")
# Charts showing the impact of Temp on Ozone cut by Month
ggplot(df, aes(x = Temp, y = Ozone)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ Month, ncol = 3) +
labs(title = "Impact of Temp on Ozone by Month")
library(dplyr)
# How many cases exist for each month
df %>%
group_by(Month) %>%
summarise(count = n())
# Charts showing the impact of Solar.R on Ozone cut by Month
ggplot(df, aes(x = Solar.R, y = Ozone)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ Month, ncol = 3) +
labs(title = "Impact of Solar.R on Ozone by Month")
# Charts showing the impact of Wind on Ozone cut by Month
ggplot(df, aes(x = Wind, y = Ozone)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ Month, ncol = 3) +
labs(title = "Impact of Wind on Ozone by Month")
# Charts showing the impact of Temp on Ozone cut by Month
ggplot(df, aes(x = Temp, y = Ozone)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ Month, ncol = 3) +
labs(title = "Impact of Temp on Ozone by Month")
library(dplyr)
library(ggplot2)
# How many cases exist for each month
df %>%
group_by(Month) %>%
summarise(count = n())
# Charts showing the impact of Solar.R on Ozone cut by Month
ggplot(df, aes(x = Solar.R, y = Ozone)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ Month, ncol = 3) +
labs(title = "Impact of Solar.R on Ozone by Month")
# Charts showing the impact of Wind on Ozone cut by Month
ggplot(df, aes(x = Wind, y = Ozone)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ Month, ncol = 3) +
labs(title = "Impact of Wind on Ozone by Month")
# Charts showing the impact of Temp on Ozone cut by Month
ggplot(df, aes(x = Temp, y = Ozone)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ Month, ncol = 3) +
labs(title = "Impact of Temp on Ozone by Month")
library(forcats)
df <- df %>%
mutate(Ozone_cat = fct_relevel(Ozone_cat, "Low", "Middle", "High"))
# Monthly counts of Ozone_cat
ggplot(df, aes(x = Month, fill = Ozone_cat)) +
geom_bar(position = "dodge") +
labs(title = "Monthly Ozone Severity",
x = "Month",
y = "Count",
fill = "Ozone Level") +
scale_fill_discrete(labels = c("Low", "Middle", "High")) +
theme_minimal()
library(dplyr)
library(ggplot2)
df %>%
group_by(Month) %>%
summarise(count = n())
ggplot(df, aes(x = Solar.R, y = Ozone)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ Month, ncol = 3) +
labs(title = "Impact of Solar.R on Ozone by Month")
ggplot(df, aes(x = Wind, y = Ozone)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ Month, ncol = 3) +
labs(title = "Impact of Wind on Ozone by Month")
ggplot(df, aes(x = Temp, y = Ozone)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ Month, ncol = 3) +
labs(title = "Impact of Temp on Ozone by Month")
# Load required libraries
library(fpp3)
library(dplyr)
library(tidyverse)
library(readxl)
KeyDriverAnalysis <- read_excel("~/Desktop/IBM6500/KeyDriverAnalysis.xlsx")
# Check the structure of the data to make sure it's loaded properly
summary(KeyDriverAnalysis)
# Creating separate datasets for performance and importance ratings
perf_data <- KeyDriverAnalysis |> select(starts_with("Perf"))
imp_data <- KeyDriverAnalysis |> select(starts_with("Imp"))
# Summary of performance and importance data
summary(perf_data)
summary(imp_data)
# Calculating the averages (means) of importance and performance ratings
perf_means <- sapply(perf_data, mean, na.rm = TRUE)
imp_means <- sapply(imp_data, mean, na.rm = TRUE)
# Print the means to check the results
print(perf_means)
print(imp_means)
# Load the ggplot2 library
library(ggplot2)
# Creating a data frame with the performance and importance means
mean_data <- data.frame(
Attribute = c("Friendly Employees", "Competitive Prices", "Competent Employees",
"Excellent Food Quality", "Wide Variety of Food", "Speed of Service"),
Performance = c(3.62, 2.22, 8.02, 5.48, 2.86, 4.20),
Importance = c(3.26, 4.02, 3.68, 4.64, 2.76, 2.70)
)
# Calculate the mean values for importance and performance
mean_performance <- mean(mean_data$Performance)
mean_importance <- mean(mean_data$Importance)
setwd("~/Desktop/IBM6400/M01-1")
setwd("~/Desktop/IBM6400/M01-2")
# Assigning text to variable X
X <- "This is my first assignment"
# Examples from paste() help documentation
paste(1:5)                        # Convert numbers to strings
paste(1:5, collapse = "")         # Collapse into single string
paste("Hello", "world")           # Combine strings with space
paste0("Hello", "world")          # Combine without separator
paste(1:3, c("a", "b", "c"), sep = "-") # Custom separator
# Concatenate X with additional text
X_updated <- paste(X, "and I'm loving it!")
X_updated
# Create vector Y and multiply by 2
Y <- c(2, 3, 4, 5)
Y <- Y * 2
# Display values of X and Y
X
Y
# Calculate maximum and minimum values
max(Y)
min(Y)
# Install and load ggplot2, then view data
# install.packages("ggplot2")  # Uncomment if needed
library(ggplot2)
head(economics)
library(ggplot)
library(ggplot2)
# Create scatter plot of unemployment vs. median unemployment duration
plot <- ggplot(economics, aes(x = unemploy, y = uempmed)) +
geom_point() +
labs(title = "Unemployment vs. Median Unemployment Duration",
x = "Number of Unemployed (thousands)",
y = "Median Duration (weeks)")
plot
#| label: fig-unemployment
#| fig-cap: "Relationship between unemployment count and median duration (cross-reference: @fig-unemployment)"
#| fig-width: 5
#| fig-aspect-ratio: 0.6
# Create plot using pipe operator
economics %>%
ggplot(aes(x = unemploy, y = uempmed)) +
geom_point() +
labs(title = "Unemployment Trends",
x = "Number of Unemployed (thousands)",
y = "Median Duration (weeks)",
caption = "Source: ggplot2 economics dataset")
library(ggplot2)
library(dplyr)
#| label: fig-unemployment
#| fig-cap: "Relationship between unemployment count and median duration (cross-reference: @fig-unemployment)"
#| fig-width: 5
#| fig-aspect-ratio: 0.6
# Create plot using pipe operator
economics %>%
ggplot(aes(x = unemploy, y = uempmed)) +
geom_point() +
labs(title = "Unemployment Trends",
x = "Number of Unemployed (thousands)",
y = "Median Duration (weeks)",
caption = "Source: ggplot2 economics dataset")
#| label: fig-unemployment
#| fig-cap: "Relationship between unemployment count and median duration (cross-reference: @fig-unemployment)"
#| fig-width: 5
#| fig-aspect-ratio: 0.6
# Create plot using pipe operator
economics %>%
ggplot(aes(x = unemploy, y = uempmed)) +
geom_point() +
labs(title = "Unemployment Trends",
x = "Number of Unemployed (thousands)",
y = "Median Duration (weeks)",
caption = "Source: ggplot2 economics dataset")
# Create scatter plot of unemployment vs. median unemployment duration
plot <- ggplot(economics, aes(x = unemploy, y = uempmed)) +
geom_point() +
labs(title = "Unemployment vs. Median Unemployment Duration",
x = "Number of Unemployed (thousands)",
y = "Median Duration (weeks)")
plot
# Install and load ggplot2, then view data
# install.packages("ggplot2")  # Uncomment if needed
library(ggplot2)
head(economics)
# Calculate maximum and minimum values
max(Y)
min(Y)
# Display values of X and Y
X
Y
# Display values of X and Y
X
Y
# Create vector Y and multiply by 2
Y <- c(2, 3, 4, 5)
Y <- Y * 2
# Concatenate X with additional text
X_updated <- paste(X, "and I'm loving it!")
X_updated
# Examples from paste() help documentation
paste(1:5)                        # Convert numbers to strings
paste(1:5, collapse = "")         # Collapse into single string
paste("Hello", "world")           # Combine strings with space
paste0("Hello", "world")          # Combine without separator
paste(1:3, c("a", "b", "c"), sep = "-") # Custom separator
# Assigning text to variable X
X <- "This is my first assignment"
---
title: "M01-2-Introduction to Literate Programming-Application Assignment"
#| label: fig-unemployment
#| fig-cap: "Relationship between unemployment count and median duration (cross-reference: @fig-unemployment)"
#| fig-width: 5
#| fig-aspect-ratio: 0.6
# Create plot using pipe operator
economics %>%
ggplot(aes(x = unemploy, y = uempmed)) +
geom_point() +
labs(title = "Unemployment Trends",
x = "Number of Unemployed (thousands)",
y = "Median Duration (weeks)",
caption = "Source: ggplot2 economics dataset")
library(ggplot2)
library(dplyr)
---
title: "M01-2-Introduction to Literate Programming-Application Assignment"
library(ggplot2)
library(dplyr)
Ex 1. Create a variable called X and assign the text
# Assigning text to variable X
X <- "This is my first assignment"
# Examples from paste() help documentation
paste(1:5)                        # Convert numbers to strings
paste(1:5, collapse = "")         # Collapse into single string
paste("Hello", "world")           # Combine strings with space
paste0("Hello", "world")          # Combine without separator
paste(1:3, c("a", "b", "c"), sep = "-") # Custom separator
# Concatenate X with additional text
X_updated <- paste(X, "and I'm loving it!")
X_updated
# Create vector Y and multiply by 2
Y <- c(2, 3, 4, 5)
Y <- Y * 2
# Display values of X and Y
X
Y
# Calculate maximum and minimum values
max(Y)
min(Y)
# Install and load ggplot2, then view data
# install.packages("ggplot2")  # Uncomment if needed
library(ggplot2)
head(economics)
# Create scatter plot of unemployment vs. median unemployment duration
plot <- ggplot(economics, aes(x = unemploy, y = uempmed)) +
geom_point() +
labs(title = "Unemployment vs. Median Unemployment Duration",
x = "Number of Unemployed (thousands)",
y = "Median Duration (weeks)")
plot
#| label: fig-unemployment
#| fig-cap: "Relationship between unemployment count and median duration (cross-reference: @fig-unemployment)"
#| fig-width: 5
#| fig-aspect-ratio: 0.6
# Create plot using pipe operator
economics %>%
ggplot(aes(x = unemploy, y = uempmed)) +
geom_point() +
labs(title = "Unemployment Trends",
x = "Number of Unemployed (thousands)",
y = "Median Duration (weeks)",
caption = "Source: ggplot2 economics dataset")
library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)
# Assigning text to variable X
X <- "This is my first assignment"
# paste() vs paste0() comparison
paste("Hello", "World", sep = "_")    # Output: "Hello_World"
paste0("Case", 1:3)                   # Output: "Case1" "Case2" "Case3"
X_updated <- paste(X, "and I'm loving it!")
Y <- c(2, 3, 4, 5) * 2  # Direct element-wise multiplication
# Display values of X and Y
X
Y
# Calculate maximum and minimum values
max(Y)
min(Y)
# Install and load ggplot2, then view data
# install.packages("ggplot2")  # Uncomment if needed
library(ggplot2)
head(economics)
# Create scatter plot of unemployment vs. median unemployment duration
plot <- ggplot(economics, aes(x = unemploy, y = uempmed)) +
geom_point() +
labs(title = "Unemployment vs. Median Unemployment Duration",
x = "Number of Unemployed (thousands)",
y = "Median Duration (weeks)")
plot
#| label: fig-unemployment
#| fig-cap: "Unemployment trends (cross-reference @fig-unemployment)"
#| fig-width: 5
#| fig-aspect-ratio: 0.6
library(dplyr)   # Essential for pipe
library(ggplot2) # Visualization
economics %>%
ggplot(aes(x = unemploy/1000, y = uempmed)) +  # Proper scaling
geom_point(alpha = 0.6, color = "navyblue") +
labs(
title = "Unemployment Analysis",
x = "Unemployed (Thousands)",
y = "Median Duration (Weeks)",
caption = "Source: ggplot2 Economics Dataset"
)
setwd("~/Desktop/IBM6400/M01-2")
X_updated <- paste(X, "and I'm loving it!")
